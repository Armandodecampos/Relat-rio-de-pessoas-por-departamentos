<!DOCTYPE html>
<html>
<head>
<title>Leitura de Excel e Relatórios de Departamentos</title>
<style>
  #resetButton, #fileInput, #copyReportButton {
    padding: 10px 15px;
    margin-top: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
  }

  #resetButton {
    background-color: #f44336;
    color: white;
    transition: background-color 0.3s ease;
    display: none; /* Inicialmente oculto */
  }

  #resetButton:hover {
    background-color: #d32f2f;
  }

  label[for="fileInput"] {
    background-color: #4CAF50;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    display: inline-block;
    margin-top: 10px;
    transition: background-color 0.3s ease;
  }

  label[for="fileInput"]:hover {
    background-color: #45a049;
  }

  #fileInput {
    display: none;
  }

  #relatorio1, #relatorio2 {
    margin-top: 20px;
    display: none; /* Inicialmente ocultos */
  }

  #copyReportButton {
    background-color: #008CBA;
    color: white;
    transition: background-color 0.3s ease;
    display: none; /* Inicialmente oculto */
  }

  #copyReportButton:hover {
    background-color: #005f73;
  }
</style>
</head>
<body>

<h1>Relatório de pessoas por departamentos</h1>
	<p>Selecione o arquivo Excel (.xlsx)</p>
<label for="fileInput">Escolher Arquivo</label>
<span id="fileName">Nenhum arquivo selecionado</span>
<input type="file" id="fileInput">
<br>

<div id="relatorio1">
  <h2>Relatório Inicial de Departamentos</h2>
  <table id="tabelaRelatorio1" border="1">
    <thead>
      <tr>
        <th>Departamento</th>
        <th>Quantidade</th>
      </tr>
    </thead>
    <tbody>
      </tbody>
    <tfoot>
      <tr>
        <th>Total</th>
        <th id="totalRelatorio1">0</th>
      </tr>
    </tfoot>
  </table>
</div>

<div id="relatorio2">
  <h2>Relatório de Departamentos Atualizado</h2>
  <table id="tabelaRelatorio2" border="1">
    <thead>
      <tr>
        <th>Departamento</th>
        <th>Quantidade</th>
      </tr>
    </thead>
    <tbody>
      </tbody>
    <tfoot>
      <tr>
        <th>Total</th>
        <th id="totalRelatorio2">0</th>
      </tr>
    </tfoot>
  </table>
  <button id="copyReportButton" onclick="copyReportAsTable()">Copiar Relatório</button>
</div>

<button id="resetButton" onclick="resetPage()">Remover Arquivo e Relatórios</button>

<script src="https://unpkg.com/xlsx/xlsx.js"></script>
<script>
  const fileInput = document.getElementById('fileInput');
  const fileNameSpan = document.getElementById('fileName');
  const relatorio1Div = document.getElementById('relatorio1');
  const relatorio2Div = document.getElementById('relatorio2');
  const tabelaRelatorio1Body = document.querySelector('#tabelaRelatorio1 tbody');
  const totalRelatorio1 = document.getElementById('totalRelatorio1');
  const tabelaRelatorio2 = document.getElementById('tabelaRelatorio2');
  const tabelaRelatorio2Body = document.querySelector('#tabelaRelatorio2 tbody');
  const totalRelatorio2 = document.getElementById('totalRelatorio2');
  const resetButton = document.getElementById('resetButton');
  const copyReportButton = document.getElementById('copyReportButton');

  fileInput.addEventListener('change', handleFile);
  fileInput.addEventListener('change', updateFileName);

  // Inicialmente, os relatórios e o botão de reset estão ocultos
  resetButton.style.display = 'none';
  relatorio1Div.style.display = 'none';
  relatorio2Div.style.display = 'none';
  copyReportButton.style.display = 'none';

  function updateFileName() {
    if (fileInput.files.length > 0) {
      fileNameSpan.textContent = fileInput.files[0].name;
    } else {
      fileNameSpan.textContent = 'Nenhum arquivo selecionado';
      resetRelatorios(); // Limpa os relatórios
      resetButton.style.display = 'none'; // Oculta o botão de reset
      relatorio1Div.style.display = 'none'; // Oculta o primeiro relatório
      relatorio2Div.style.display = 'none'; // Oculta o segundo relatório
      copyReportButton.style.display = 'none'; // Oculta o botão de copiar
    }
  }

  function handleFile(e) {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(event) {
        const data = new Uint8Array(event.target.result);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });

        gerarRelatorioInicial(jsonData);
        resetButton.style.display = 'inline-block'; // Mostra o botão de reset
        relatorio1Div.style.display = 'block'; // Mostra o primeiro relatório
        relatorio2Div.style.display = 'block'; // Mostra o segundo relatório
        copyReportButton.style.display = 'inline-block'; // Mostra o botão de copiar
      };
      reader.readAsArrayBuffer(file);
    }
  }

  function gerarRelatorioInicial(data) {
    const departamentos = {};
    const idsProcessados = new Set();

    // Começar da linha 3 (índice 2 no array)
    for (let i = 2; i < data.length; i++) {
      const linha = data[i];
      const idPessoal = linha[6]; // Coluna G (índice 6)
      let nomeDepartamento = linha[11]; // Coluna L (índice 11)

      if (idPessoal !== '' && !idsProcessados.has(idPessoal)) {
        if (nomeDepartamento === '') {
          nomeDepartamento = 'Portaria virtual';
        }
        if (nomeDepartamento) {
          departamentos[nomeDepartamento] = (departamentos[nomeDepartamento] || 0) + 1;
        }
        idsProcessados.add(idPessoal);
      }
    }

    atualizarTabelaRelatorio(departamentos, tabelaRelatorio1Body, totalRelatorio1);
    gerarRelatorioAtualizado(data, departamentos);
  }

  function gerarRelatorioAtualizado(data, relatorioInicial) {
    const departamentosAtualizados = {};
    const idsProcessados = new Set();
    const modificacoes = {
      "Visitantes": "Visitante",
      "Ab-inbev": "AGT",
      "Prestador de Serviços": "Prestador de Serviços",
      "CDD Campinas": "CDD",
      "Camila Murakawa": "AGT",
      "Felipe Aragão": "AGT",
      "Gabriel Filipecki": "AGT",
      "Luis Veronesi": "AGT",
      "Rafael Pacini": "AGT",
      "Sonia Fuscaldi": "AGT",
      "Sergio Vezza": "GROWTH",
      "Other Units": "Outras Unidades",
      "Fabio Mazza": "AGT",
      "Ronaldo Fiorito": "AGT",
      "Marcelo Rentz": "AGT",
      "Goran Djuric": "AGT",
      "AC": "Visitante",
      "CSC": "CSC",
      "Carlos Nobre": "AGT",
      "Fernando Leite de Campos": "AGT",
      "Mauricio Nogueira Soufen": "AGT",
      "Alexandre Van Wonterghem": "AGT",
      "Keith Davies": "AGT",
      "Lojista - Feirinha": "Visitante",
      "Terceiros Growth": "GROWTH"
    };

    for (let i = 2; i < data.length; i++) {
      const linha = data[i];
      const idPessoal = linha[6];
      let nomeDepartamento = linha[11];

      if (idPessoal !== '' && !idsProcessados.has(idPessoal)) {
        if (nomeDepartamento === '') {
          nomeDepartamento = 'Portaria virtual';
        }
        if (nomeDepartamento in modificacoes) {
          nomeDepartamento = modificacoes[nomeDepartamento];
        }
        if (nomeDepartamento) {
          departamentosAtualizados[nomeDepartamento] = (departamentosAtualizados[nomeDepartamento] || 0) + 1;
        }
        idsProcessados.add(idPessoal);
      }
    }

    atualizarTabelaRelatorio(departamentosAtualizados, tabelaRelatorio2Body, totalRelatorio2);
  }

  function atualizarTabelaRelatorio(dados, tabelaBody, totalElement) {
    tabelaBody.innerHTML = ''; // Limpa a tabela
    let total = 0;
    for (const departamento in dados) {
      if (dados.hasOwnProperty(departamento)) {
        const quantidade = dados[departamento];
        const row = tabelaBody.insertRow();
        const departamentoCell = row.insertCell();
        const quantidadeCell = row.insertCell();
        departamentoCell.textContent = departamento;
        quantidadeCell.textContent = quantidade;
        total += quantidade;
      }
    }
    totalElement.textContent = total;
  }

  function resetPage() {
    fileInput.value = ''; // Limpa o arquivo selecionado
    fileNameSpan.textContent = 'Nenhum arquivo selecionado'; // Reseta o nome do arquivo
    resetRelatorios(); // Limpa os relatórios
    resetButton.style.display = 'none'; // Oculta o botão de reset
    relatorio1Div.style.display = 'none'; // Oculta o primeiro relatório
    relatorio2Div.style.display = 'none'; // Oculta o segundo relatório
    copyReportButton.style.display = 'none'; // Oculta o botão de copiar
  }

  function resetRelatorios() {
    const tabelaRelatorio1Body = document.querySelector('#tabelaRelatorio1 tbody');
    const totalRelatorio1 = document.getElementById('totalRelatorio1');
    const tabelaRelatorio2Body = document.querySelector('#tabelaRelatorio2 tbody');
    const totalRelatorio2 = document.getElementById('totalRelatorio2');

    tabelaRelatorio1Body.innerHTML = '';
    totalRelatorio1.textContent = '0';
    tabelaRelatorio2Body.innerHTML = '';
    totalRelatorio2.textContent = '0';
  }

  function copyReportAsTable() {
    const tabela = document.getElementById('tabelaRelatorio2');
    let textoParaCopiar = "";

    // Adiciona as linhas do corpo
    const rows = tabela.querySelectorAll('tbody tr');
    rows.forEach(row => {
      const departamentoCell = row.querySelector('td:first-child');
      const quantidadeCell = row.querySelector('td:last-child');
      if (departamentoCell && quantidadeCell) {
        textoParaCopiar += `${departamentoCell.textContent.trim()} = ${quantidadeCell.textContent.trim()}\n`;
      }
    });

    // Adiciona a linha total
    const totalRow = tabela.querySelector('tfoot tr');
    if (totalRow) {
      const totalLabelCell = totalRow.querySelector('th:first-child');
      const totalValueCell = totalRow.querySelector('th:last-child');
      if (totalLabelCell && totalValueCell) {
        textoParaCopiar += `${totalLabelCell.textContent.trim()} = ${totalValueCell.textContent.trim()}`;
      }
    }

    // Tenta copiar para a área de transferência
    navigator.clipboard.writeText(textoParaCopiar)
      .then(() => {
        // Copiado com sucesso (sem alerta)
      })
      .catch(err => {
        console.error('Falha ao copiar o relatório: ', err);
        // Falha ao copiar (sem alerta)
      });
  }
</script>

</body>
</html>
