<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8" />
    <title>Pesquisa de pessoas por per√≠odo</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        /* Scrollbar para navegadores WebKit */
::-webkit-scrollbar {
    width: 32px;
}

::-webkit-scrollbar-track {
    background: #eee;
    border-left:1px solid #111;
}

::-webkit-scrollbar-thumb {
    background-color: #555;
}

::-webkit-scrollbar-thumb:hover {
    background: #333;
}

/* Scrollbar para Firefox */
body {
    scrollbar-width: thin;
    scrollbar-color: #555 #eee;
}
        input[type="file"], input[type="text"] { margin-bottom: 10px; }
        ul { list-style-type: none; padding-left: 0; }
        li { padding: 5px 0; border-bottom: 1px solid #ccc; }
        #upload {
            display: none; /* Esconde o input padr√£o */
        }

        .upload-label {
            display: inline-block;
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
        }

        .upload-label:hover {
            background-color: #0056b3;
        }

        .search-input {
            width: 100%;
            max-width: 400px;
            padding: 10px 15px;
            font-size: 16px;
            border: 2px solid #ccc;
            border-radius: 25px;
            outline: none;
            transition: 0.3s;
            box-sizing: border-box;
        }

        .search-input:focus {
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0,123,255,0.4);
        }

       #department-filter {
    display: flex;
    flex-direction: column;
    margin-bottom: 15px; /* Mantenha a margem inferior para separar do conte√∫do abaixo */
    border-bottom: 1px solid #eee; /* Mantenha a borda inferior, se desejado */
    padding-bottom: 10px; /* Mantenha o padding inferior, se desejado */
}

#department-filter label {
    margin-top: 0;
    margin-bottom: 0;
    margin-right: 0;
    cursor: pointer;
    display: flex; /* Use flexbox para alinhar os itens */
    align-items: center; /* Alinha verticalmente os itens ao centro */
    margin-left: 0;
    padding-left: 0; /* Remova o padding esquerdo anterior */
}

#department-filter input[type="checkbox"] {
    margin-top: 0;
    margin-bottom: 0;
    vertical-align: middle;
    margin-right: 5px; /* Adiciona um pequeno espa√ßo entre o checkbox e o nome */
}

#department-filter br {
    display: none;
}

        .department-list {
            list-style-type: none;
            padding-left: 0;
        }

        .department-list > li {
            padding: 10px 0;
            border-bottom: 1px solid #ddd;
        }

        .department-list > li:first-child {
            border-top: 1px solid #ddd;
        }

        .department-content {
            margin-left: 20px;
            display: none; /* Initially hidden */
        }

        .department-content.visible {
            display: block;
        }

        #department-summary {
            margin-top: 20px;
            border-collapse: collapse;
            width: 100%;
            max-width: 600px;
        }

        #department-summary th, #department-summary td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        #department-summary th {
            background-color: #f0f0f0;
        }

        #department-summary tfoot td {
            font-weight: bold;
        }

        #specific-department-summary {
            margin-top: 20px;
            border-collapse: collapse;
            width: 100%;
            max-width: 600px;
        }

        #specific-department-summary th, #specific-department-summary td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        #specific-department-summary th {
            background-color: #f0f0f0;
        }

        #specific-department-summary tfoot td {
            font-weight: bold;
        }
    </style>
</head>
<body>

    <h3>Pesquisa de pessoas por per√≠odo</h3>
    <input type="file" id="upload" accept=".xls,.xlsx" />
    <label for="upload" class="upload-label">Selecionar arquivo Excel</label>
    <p id="file-name" style="font-style: italic; color: #555;"></p>
    <br>
    <p id="count">Total de pessoas: 0</p>
    <div id="department-filter">
        <strong>Filtrar por Departamento:</strong><br>
    </div>
    <input type="search" id="search" placeholder="üîç Pesquisar..." class="search-input" />
    <button id="export-excel" style="padding: 10px 15px; font-size: 16px; border: none; border-radius: 5px; background-color: #28a745; color: white; cursor: pointer; margin-top: 20px;">Exportar para Excel</button>
    <ul id="list" class="department-list"></ul>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <h1>Relat√≥rios</h1>
    <p>Relat√≥rio (Global)</p>
   <table id="department-summary">
        <thead>
            <tr>
                <th>Departamento</th>
                <th>Quantidade</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
        <tfoot>
            <tr>
                <td>Total</td>
                <td>0</td>
            </tr>
        </tfoot>
    </table>
    <br>
    <br>
    <br>
    <br>
    <p>Relat√≥rio (BEES)</p>
    <table id="specific-department-summary">
        <thead>
            <tr>
                <th>Departamento</th>
                <th>Quantidade</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
         <tfoot>
            <tr>
                <td>Total</td>
                <td>0</td>
            </tr>
        </tfoot>
    </table>
    <script>
        const uploadInput = document.getElementById('upload');
        const searchInput = document.getElementById('search');
        const list = document.getElementById('list');
        const departmentFilterDiv = document.getElementById('department-filter');
        let allItemsByDepartment = {};
        const departmentSummaryTable = document.getElementById('department-summary');
        const specificDepartmentSummaryTable = document.getElementById('specific-department-summary');
        const departmentMapping = {
            "Visitantes": "Visitante",
            "Ab-inbev": "AGT",
            "Prestador de Servi√ßos": "Prestador de Servi√ßos",
            "CDD Campinas": "CDD",
            "Camila Murakawa": "AGT",
            "Felipe Arag√£o": "AGT",
            "Gabriel Filipecki": "AGT",
            "Luis Veronesi": "AGT",
            "Rafael Pacini": "AGT",
            "Sonia Fuscaldi": "AGT",
            "Sergio Vezza": "GROWTH",
            "Fabio Mazza": "AGT",
            "Ronaldo Fiorito": "AGT",
            "Marcelo Rentz": "AGT",
            "Goran Djuric": "AGT",
            "AC": "Visitante",
            "CSC": "CSC",
            "Carlos Nobre": "AGT",
            "Fernando Leite de Campos": "AGT",
            "Mauricio Nogueira Soufen": "AGT",
            "Alexandre Van Wonterghem": "AGT",
            "Keith Davies": "AGT",
            "Lojista - Feirinha": "Visitante",
            "Terceiros Growth": "GROWTH",
            "Tech": "GROWTH",
            "Bees Tech": "GROWTH",
            "Growth Group": "GROWTH"
        };
        const specificDepartments = ["CDD Campinas", "Sergio Vezza", "Terceiros Growth", "Bees Tech", "Growth Group"];
        const exportExcelBtn = document.getElementById('export-excel');
        let departmentCheckboxes = {};

        uploadInput.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            document.getElementById('file-name').textContent = `üìÇ Arquivo selecionado: ${file.name}`;
            if (!file) return;

            const data = await file.arrayBuffer();
            const workbook = XLSX.read(data, { type: 'array' });
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const json = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

            const itemsByDept = {};
            const uniqueIds = new Set();

            json.slice(2).forEach(row => {
                const uniqueKey = row[6]; // Coluna G (ID)
                const department = row[11] && row[11].trim() ? row[11].trim() : "Portaria Virtual"; // Coluna L

                if (uniqueKey && !uniqueIds.has(uniqueKey)) {
                    uniqueIds.add(uniqueKey);
                    const nome = row[7] || "";        // Coluna H
                    const sobrenome = row[8] || "";     // Coluna I
                    const itemText = `${nome} ${sobrenome} - ${uniqueKey}`;
                    if (!itemsByDept[department]) { // Usando o departamento original aqui
                        itemsByDept[department] = [];
                    }
                    itemsByDept[department].push(itemText);
                }
            });

            allItemsByDepartment = itemsByDept;
            renderDepartmentCheckboxes(Object.keys(allItemsByDepartment).sort());
            filterAndRenderList();
            updateDepartmentSummary(Object.values(allItemsByDepartment).flat());
            updateSpecificDepartmentSummary(Object.values(allItemsByDepartment).flat());
        });

        searchInput.addEventListener('input', () => {
            filterAndRenderList();
            const visibleItems = getVisibleItems();
            updateDepartmentSummary(visibleItems);
            updateSpecificDepartmentSummary(visibleItems);
        });

        function renderDepartmentCheckboxes(departments) {
    departmentFilterDiv.innerHTML = '<strong>Filtrar por Departamento:</strong><br>';
    departmentCheckboxes = {};
    departments.forEach(dept => {
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.id = `dept-${dept.replace(/\s+/g, '-')}`;
        checkbox.value = dept;
        checkbox.checked = true;
        checkbox.addEventListener('change', filterAndRenderList);

        const label = document.createElement('label');
        label.htmlFor = checkbox.id;
        label.textContent = `${dept} (${allItemsByDepartment[dept] ? allItemsByDepartment[dept].length : 0})`;
        label.style.marginLeft = '5px'; // Adiciona um espa√ßo entre o checkbox e o texto
        label.style.marginRight = '0px';
        label.style.marginBottom = '5px';
        label.style.display = 'flex'; // Garante que o label √© um container flex
        label.style.alignItems = 'center'; // Alinha verticalmente

        label.prepend(checkbox); // Adiciona o checkbox *dentro* do label, antes do texto
        departmentFilterDiv.appendChild(label);
        departmentFilterDiv.appendChild(document.createElement('br'));

        departmentCheckboxes[dept] = checkbox;
    });
}
function filterAndRenderList() {
    list.innerHTML = '';
    let total = 0;
    for (const dept in allItemsByDepartment) {
        const checkbox = departmentCheckboxes[dept];
        if (checkbox && checkbox.checked) {
            const filteredItems = allItemsByDepartment[dept].filter(item => {
                const search = searchInput.value.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
                const searchWords = search.split(/\s+/).filter(Boolean);
                const itemWords = item.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
                return searchWords.every(word => itemWords.includes(word));
            });

            if (filteredItems.length > 0) {
                const deptLi = document.createElement('li');
                deptLi.innerHTML = `<strong>${dept} (${filteredItems.length})</strong>`;
                const deptContentUl = document.createElement('ul');
                deptContentUl.classList.add('department-content');
                deptContentUl.classList.add('visible');
                filteredItems.forEach(item => {
                    const itemLi = document.createElement('li');
                    itemLi.textContent = item;
                    deptContentUl.appendChild(itemLi);
                });
                deptLi.appendChild(deptContentUl);
                list.appendChild(deptLi);
                total += filteredItems.length;
            }
        }
    }
    document.getElementById('count').textContent = `Total de pessoas: ${total}`;
}
        function getVisibleItems() {
            let visibleItems = [];
            for (const dept in allItemsByDepartment) {
                const checkbox = departmentCheckboxes[dept];
                if (checkbox && checkbox.checked) {
                    const filteredItems = allItemsByDepartment[dept].filter(item => {
                        const search = searchInput.value.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
                        const searchWords = search.split(/\s+/).filter(Boolean);
                        const itemWords = item.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
                        return searchWords.every(word => itemWords.includes(word));
                    });
                    visibleItems = visibleItems.concat(filteredItems);
                }
            }
            return visibleItems;
        }

        function updateDepartmentSummary(items) {
            const summaryTableBody = departmentSummaryTable.querySelector('tbody');
            const summaryTableFooter = departmentSummaryTable.querySelector('tfoot td:last-child');
            summaryTableBody.innerHTML = '';

            const departmentCounts = {};
            let total = 0;

            items.forEach(item => {
                let dept = "N√£o Informado";
                for (const d in allItemsByDepartment) {
                    if (allItemsByDepartment[d].includes(item)) {
                        dept = d;
                        break;
                    }
                }
                const mappedDept = departmentMapping[dept] || dept;
                departmentCounts[mappedDept] = (departmentCounts[mappedDept] || 0) + 1;
                total++;
            });

            for (const dept in departmentCounts) {
                const row = summaryTableBody.insertRow();
                const deptCell = row.insertCell();
                const countCell = row.insertCell();
                deptCell.textContent = dept;
                countCell.textContent = departmentCounts[dept];
            }

            summaryTableFooter.textContent = total;
        }

        function updateSpecificDepartmentSummary(items) {
            const summaryTableBody = specificDepartmentSummaryTable.querySelector('tbody');
            const summaryTableFooter = specificDepartmentSummaryTable.querySelector('tfoot td:last-child');
            summaryTableBody.innerHTML = '';
            let total = 0;
            const specificCounts = {};
            specificDepartments.forEach(dept => specificCounts[dept] = 0);

            items.forEach(item => {
                let dept = "N√£o Informado";
                for (const d in allItemsByDepartment) {
                    if (allItemsByDepartment[d].includes(item)) {
                        dept = d;
                        break;
                    }
                }
                if (specificDepartments.includes(dept)) {
                    specificCounts[dept]++;
                    total++;
                }
            });

            specificDepartments.forEach(deptName => {
                const row = summaryTableBody.insertRow();
                const deptCell = row.insertCell();
                const countCell = row.insertCell();
                deptCell.textContent = deptName;
                countCell.textContent = specificCounts[deptName];
            });

            summaryTableFooter.textContent = total;
        }

        exportExcelBtn.addEventListener('click', () => {
            const workbook = XLSX.utils.book_new();
            for (const dept in allItemsByDepartment) {
                const checkbox = departmentCheckboxes[dept];
                if (checkbox && checkbox.checked) {
                    const worksheetData = [[`Departamento: ${dept}`], ["Nome Completo - RG"]];
                    allItemsByDepartment[dept].forEach(item => {
                        worksheetData.push([item.split(' - ')[0].trim()]);
                    });
                    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);
                    XLSX.utils.book_append_sheet(workbook, worksheet, dept);
                }
            }
            XLSX.writeFile(workbook, 'lista_por_departamento.xlsx');
        });
    </script>

</body>
