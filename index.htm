<!DOCTYPE html>
<html>
<head>
<title>Relatórios de Pessoas e Departamentos</title>
<style>
  /* Estilos gerais */
  body {
    font-family: sans-serif;
    padding:30px;
  }
  
  .conteudo {
  margin:auto;
  left:0;
  right:0;
  max-width:700px;
  }

  h1, h2, h3 {
    text-align: center;
    color: #333;
  }

  p {
    margin-bottom: 10px;
  }

  label[for="fileInput"] {
    background-color: #4CAF50;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 0px;
    font-size: 16px;
    cursor: pointer;
    display: inline-block;
    margin-top: 10px;
    transition: background-color 0.3s ease;
  }

  label[for="fileInput"]:hover {
    background-color: #45a049;
  }

  #fileInput {
    display: none;
  }

  #fileName {
    margin-left: 10px;
    font-style: italic;
    color: #777;
  }

  button {
    padding: 10px 15px;
    margin-top: 10px;
    border: 1px solid #ccc;
    border-radius: 0px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  #resetButton {
    background-color: #f44336;
    color: white;
    display: none; /* Inicialmente oculto */
  }

  #resetButton:hover {
    background-color: #d32f2f;
  }

  #copyPersonReportButton, #copyDepartmentReportButton {
    background-color: #008CBA;
    color: white;
    display: none; /* Inicialmente oculto */
    margin-right: 10px;
    margin-top: 10px;
  }

  #copyPersonReportButton:hover, #copyDepartmentReportButton:hover {
    background-color: #005f73;
  }

  #searchInput {
    padding: 10px;
    margin-top: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    cursor: text;
    width: 300px;
    display: none; /* Inicialmente oculto */
    margin-right: 10px;
  }

  /* Estilos para o relatório de pessoas */
  #relatorioPessoas {
    margin-top: 20px;
    display: none; /* Inicialmente oculto */
    font-size: 18px;
    padding: 15px;
    border: 1px solid #eee;
    border-radius: 8px;
    background-color: #f9f9f9;
  }

  #relatorioPessoas p {
    margin-bottom: 10px;
  }

  #relatorioPessoas strong {
    font-weight: bold;
  }

  #listaUltimosRegistros {
    margin-top: 10px;
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 5px;
    font-size: 16px;
  }

  #listaUltimosRegistros div {
    margin-bottom: 5px;
    word-break: break-word; /* Quebra palavras longas */
    border: 2px solid #000; /* Adiciona a borda */
    padding: 8px; /* Adiciona um pouco de espaço interno para a borda não ficar colada no texto */
    border-radius: 5px; /* Opcional: para deixar a borda com cantos arredondados */
  }

  .saida {
    background-color: #ffb4b4; /* Vermelho claro */
  }

  .entrada {
    background-color: #fff; /* Verde claro */
  }

  /* Estilos para o relatório de departamentos */
  #relatorioDepartamentos {
    margin-top: 20px;
    display: none; /* Inicialmente oculto */
  }

  #tabelaRelatorioDepartamentos1, #tabelaRelatorioDepartamentos2 {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
  }

  #tabelaRelatorioDepartamentos1 th, #tabelaRelatorioDepartamentos1 td,
  #tabelaRelatorioDepartamentos2 th, #tabelaRelatorioDepartamentos2 td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }

  #tabelaRelatorioDepartamentos1 th, #tabelaRelatorioDepartamentos2 th {
    background-color: #f2f2f2;
    font-weight: bold;
  }

  #tabelaRelatorioDepartamentos1 tfoot th, #tabelaRelatorioDepartamentos1 tfoot td,
  #tabelaRelatorioDepartamentos2 tfoot th, #tabelaRelatorioDepartamentos2 tfoot td {
    font-weight: bold;
    background-color: #eee;
  }

  #relatorio1, #relatorio2 {
    display: none; /* Removido, pois já está definido em #relatorioDepartamentos > h3 e table */
  }
  
  #searchInput {
  padding: 10px; /* Espaçamento interno para o texto */
  margin-top: 10px; /* Margem acima do campo de pesquisa */
  border: 2px solid #222; /* Borda cinza clara */
  border-radius: 50px; /* Bordas arredondadas */
  font-size:22px;
  cursor: text; /* Altera o cursor para indicar que é um campo de texto */
  width: 300px; /* Largura do campo de pesquisa (ajuste conforme necessário) */
  display: inline-block; /* Permite que ele fique na mesma linha de outros elementos inline ou inline-block */
  margin-right: 10px; /* Margem à direita do campo de pesquisa (para separá-lo de outros elementos) */
  box-sizing: border-box; /* Garante que padding e border não aumentem a largura total */
  padding:10px;
  text-align:center;
}

#searchInput:focus {
  outline: none; /* Remove a borda de foco padrão do navegador */
  border-color: #007bff; /* Altera a cor da borda quando o campo está em foco (azul claro) */
  box-shadow: 0 0 5px rgba(0, 123, 255, 0.5); /* Adiciona uma sombra suave ao redor do campo em foco */
}

#searchInput::placeholder {
font-size:22px;
  color: #777; /* Cor do texto do placeholder */
  font-style: italic; /* Estilo itálico para o placeholder */
}

.legenda {
  margin-top: 10px;
  font-size: 14px;
  color: #555;
}

.legenda span {
  display: inline-block;
  width: 15px;
  height: 15px;
  border: 1px solid #ccc;
  margin-right: 5px;
  vertical-align: middle;
}

.legenda .entrada-cor {
  background-color: #fff; /* Cor para "Dentro do prédio" (verde claro) */
}

.legenda .saida-cor {
  background-color: #ffb4b4; /* Cor para "Fora do prédio" (vermelho claro) */
}
</style>
</head>
<body>
<div class="conteudo">
<h1>Relatórios de Pessoas e Departamentos</h1>
<p>Selecione o arquivo Excel (.xlsx)</p>
<label for="fileInput">Escolher Arquivo</label>
<span id="fileName">Nenhum arquivo selecionado</span>
<input type="file" id="fileInput">
<br>

<div id="relatorioDepartamentos">
  <h2>Relatório de Departamentos</h2>
  <h3>Relatório Inicial de Departamentos</h3>
  <table id="tabelaRelatorioDepartamentos1">
    <thead>
      <tr>
        <th>Departamento</th>
        <th>Quantidade</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
    <tfoot>
      <tr>
        <th>Total</th>
        <th id="totalRelatorioDepartamentos1">0</th>
      </tr>
    </tfoot>
  </table>

  <h3>Relatório de Departamentos Atualizado</h3>
  <table id="tabelaRelatorioDepartamentos2">
    <thead>
      <tr>
        <th>Departamento</th>
        <th>Quantidade</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
    <tfoot>
      <tr>
        <th>Total</th>
        <th id="totalRelatorioDepartamentos2">0</th>
      </tr>
    </tfoot>
  </table>
  <button id="copyDepartmentReportButton" onclick="copyDepartmentReportAsTable()">Copiar Relatório de Departamentos</button>
</div>

<button id="resetButton" onclick="resetPage()">Remover Arquivo e Relatórios</button>

<div id="relatorioPessoas">
  <h2>Relatório de pessoas que entraram e sairam do prédio</h2>
  <p>Pessoas que entraram: <span id="pessoasNoPredio">0</span></p>
  <p>Pessoas que sairam: <span id="pessoasQueSairam">0</span></p>
  <p><strong>Total de Pessoas: <span id="totalPessoas">0</span></strong></p>
  <br>
  <div>
    <input type="text" id="searchInput" placeholder="Pesquisar nos registros...">
  </div>
  <br>
  <div class="legenda">
  Legenda:
  Pessoas que entraram: <span class="entrada-cor"></span>
  Pessoas que sairam: <span class="saida-cor"></span>
</div>
<br>
  <div id="listaUltimosRegistros">
    <h3>Últimos Registros por ID Pessoal (Dados Completos):</h3>
    <div id="ultimosRegistrosLista"></div>
  </div>
</div>
</div>
<script src="https://unpkg.com/xlsx/xlsx.js"></script>
<script>
  const fileInput = document.getElementById('fileInput');
  const fileNameSpan = document.getElementById('fileName');
  const relatorioPessoasDiv = document.getElementById('relatorioPessoas');
  const pessoasNoPredioSpan = document.getElementById('pessoasNoPredio');
  const pessoasQueSairamSpan = document.getElementById('pessoasQueSairam');
  const totalPessoasSpan = document.getElementById('totalPessoas');
  const listaUltimosRegistrosDiv = document.getElementById('listaUltimosRegistros');
  const ultimosRegistrosLista = document.getElementById('ultimosRegistrosLista');
  const searchInput = document.getElementById('searchInput');

  const relatorioDepartamentosDiv = document.getElementById('relatorioDepartamentos');
  const tabelaRelatorioDepartamentos1Body = document.querySelector('#tabelaRelatorioDepartamentos1 tbody');
  const totalRelatorioDepartamentos1 = document.getElementById('totalRelatorioDepartamentos1');
  const tabelaRelatorioDepartamentos2Body = document.querySelector('#tabelaRelatorioDepartamentos2 tbody');
  const totalRelatorioDepartamentos2 = document.getElementById('totalRelatorioDepartamentos2');

  const resetButton = document.getElementById('resetButton');
  const copyDepartmentReportButton = document.getElementById('copyDepartmentReportButton');

  let todosUltimosRegistros = [];

  fileInput.addEventListener('change', handleFile);
  fileInput.addEventListener('change', updateFileName);
  searchInput.addEventListener('input', handleSearch);

  // Inicialmente, os relatórios e botões estão ocultos
  resetButton.style.display = 'none';
  relatorioPessoasDiv.style.display = 'none';
  relatorioDepartamentosDiv.style.display = 'none';
  copyDepartmentReportButton.style.display = 'none';
  searchInput.style.display = 'none';

  function updateFileName() {
    if (fileInput.files.length > 0) {
      fileNameSpan.textContent = fileInput.files[0].name;
    } else {
      fileNameSpan.textContent = 'Nenhum arquivo selecionado';
      resetAllReports();
    }
  }

  function handleFile(e) {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(event) {
        const data = new Uint8Array(event.target.result);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });

        processarDados(jsonData);
        resetButton.style.display = 'inline-block';
      };
      reader.readAsArrayBuffer(file);
    }
  }

  function processarDados(data) {
  // Processar relatório de pessoas
  const ultimoRegistroPorId = {};
  const header = data[0] || [];

  for (let i = 1; i < data.length; i++) { // Começar da segunda linha (após o cabeçalho)
    const linha = data[i];
    const idPessoal = linha[6];
    const dataHoraStr = linha[1];
    const status = linha[3];
    const entradaSaidaColunaD = linha[3]; // Coluna D (índice 3)

    if (idPessoal !== undefined && idPessoal !== '') {
      if (dataHoraStr !== undefined && status !== undefined) {
        const dataHora = new Date(dataHoraStr);
        if (!isNaN(dataHora.getTime())) {
          if (!ultimoRegistroPorId[idPessoal] || dataHora > ultimoRegistroPorId[idPessoal].dataHora) {
            ultimoRegistroPorId[idPessoal] = {
              dataHora: dataHora,
              status: status ? status.toLowerCase() : '',
              entradaSaidaColunaD: entradaSaidaColunaD ? entradaSaidaColunaD.toLowerCase() : '',
              linha: linha
            };
          }
        }
      }
    }
  }

  todosUltimosRegistros = [];
  ultimosRegistrosLista.innerHTML = '';
  const pessoasNoPredio = new Set();
  const pessoasQueSairam = new Set();

  for (const idPessoal in ultimoRegistroPorId) {
    if (ultimoRegistroPorId.hasOwnProperty(idPessoal)) {
      const ultimoRegistro = ultimoRegistroPorId[idPessoal];
      const status = ultimoRegistro.status;
      const entradaSaidaColunaD = ultimoRegistro.entradaSaidaColunaD;
      const linhaDados = ultimoRegistro.linha;
      let registroTexto = `ID: ${idPessoal}, Status: ${status}`;
      const registroDiv = document.createElement('div');
      registroDiv.style.border = '2px solid #000';
      registroDiv.style.padding = '8px';
      registroDiv.style.borderRadius = '5px';
      registroDiv.style.marginBottom = '5px';

      for (let j = 0; j < linhaDados.length; j++) {
        if (linhaDados[j] !== undefined && linhaDados[j] !== '') {
          const colunaNome = header[j] || `Coluna ${j + 1}`;
          let valor = linhaDados[j];
          if (j === 6 || j === 7 || j === 8) { // Colunas G (índice 6), H (índice 7), I (índice 8)
            valor = `<strong>${valor}</strong>`;
          }
          registroTexto += `, ${colunaNome}: ${valor}`;
        }
      }
      registroDiv.innerHTML = registroTexto;

      const isEntrada = entradaSaidaColunaD === 'entrada';
      const isSaidaColunaD = entradaSaidaColunaD === 'facial.elev.blb02sa' ||
                              entradaSaidaColunaD === 'facial.elev.2ss-said' ||
                              entradaSaidaColunaD === 'facial.elev.bla.01sa' ||
                              entradaSaidaColunaD === 'elevador -1b' ||
                              entradaSaidaColunaD === 'elevador novo -1b' ||
                              entradaSaidaColunaD === 'elevador-1a' ||
                              entradaSaidaColunaD === 'facial.elev.blb.02' ||
                              entradaSaidaColunaD === 'facial.elev.bla.02' ||
                              entradaSaidaColunaD === 'facial.elev.bl.b.02';
      const isSaidaStatus = status.includes('saida') || status.includes('sáida');

      if (isSaidaColunaD || isSaidaStatus) {
        registroDiv.classList.add('saida');
        pessoasQueSairam.add(idPessoal);
      } else if (isEntrada) {
        registroDiv.classList.add('entrada');
        pessoasNoPredio.add(idPessoal);
      } else if (!isSaidaStatus) { // Se não for saída pelo status, consideramos entrada (padrão)
        registroDiv.classList.add('entrada');
        pessoasNoPredio.add(idPessoal);
      }

      ultimosRegistrosLista.appendChild(registroDiv);
      todosUltimosRegistros.push({ div: registroDiv, texto: registroTexto.toLowerCase() });
    }
  }

  pessoasNoPredioSpan.textContent = pessoasNoPredio.size;
  pessoasQueSairamSpan.textContent = pessoasQueSairam.size;
  totalPessoasSpan.textContent = pessoasNoPredio.size + pessoasQueSairam.size;
  relatorioPessoasDiv.style.display = 'block';
  searchInput.style.display = 'inline-block';

  // Processar relatório de departamentos
  gerarRelatorioDepartamentos(data);
  relatorioDepartamentosDiv.style.display = 'block';
  copyDepartmentReportButton.style.display = 'inline-block';
}
  function gerarRelatorioDepartamentos(data) {
    const departamentosInicial = {};
    const departamentosAtualizado = {};
    const idsProcessadosDepartamentos = new Set();
    const header = data[0] || [];
    const modificacoes = {
      "Visitantes": "Visitante",
      "Ab-inbev": "AGT",
      "Prestador de Serviços": "Prestador de Serviços",
      "CDD Campinas": "CDD",
      "Camila Murakawa": "AGT",
      "Felipe Aragão": "AGT",
      "Gabriel Filipecki": "AGT",
      "Luis Veronesi": "AGT",
      "Rafael Pacini": "AGT",
      "Sonia Fuscaldi": "AGT",
      "Sergio Vezza": "GROWTH",
      "Other Units": "Outras Unidades",
      "Fabio Mazza": "AGT",
      "Ronaldo Fiorito": "AGT",
      "Marcelo Rentz": "AGT",
      "Goran Djuric": "AGT",
      "AC": "Visitante",
      "CSC": "CSC",
      "Carlos Nobre": "AGT",
      "Fernando Leite de Campos": "AGT",
      "Mauricio Nogueira Soufen": "AGT",
      "Alexandre Van Wonterghem": "AGT",
      "Keith Davies": "AGT",
      "Lojista - Feirinha": "Visitante",
      "Terceiros Growth": "GROWTH"
    };

    for (let i = 2; i < data.length; i++) {
      const linha = data[i];
      const idPessoal = linha[6];
      let nomeDepartamento = linha[11];

      if (idPessoal !== undefined && idPessoal !== '' && !idsProcessadosDepartamentos.has(idPessoal)) {
        if (nomeDepartamento === '') {
          nomeDepartamento = 'Portaria virtual';
        }
        if (nomeDepartamento) {
          departamentosInicial[nomeDepartamento] = (departamentosInicial[nomeDepartamento] || 0) + 1;
        }

        let departamentoAtualizadoNome = nomeDepartamento;
        if (departamentoAtualizadoNome in modificacoes) {
          departamentoAtualizadoNome = modificacoes[departamentoAtualizadoNome];
        }
        if (departamentoAtualizadoNome) {
          departamentosAtualizado[departamentoAtualizadoNome] = (departamentosAtualizado[departamentoAtualizadoNome] || 0) + 1;
        }
        idsProcessadosDepartamentos.add(idPessoal);
      }
    }

    atualizarTabelaDepartamentos(departamentosInicial, tabelaRelatorioDepartamentos1Body, totalRelatorioDepartamentos1);
    atualizarTabelaDepartamentos(departamentosAtualizado, tabelaRelatorioDepartamentos2Body, totalRelatorioDepartamentos2);
  }

  function atualizarTabelaDepartamentos(dados, tabelaBody, totalElement) {
    tabelaBody.innerHTML = '';
    let total = 0;
    for (const departamento in dados) {
      if (dados.hasOwnProperty(departamento)) {
        const quantidade = dados[departamento];
        const row = tabelaBody.insertRow();
        const departamentoCell = row.insertCell();
        const quantidadeCell = row.insertCell();
        departamentoCell.textContent = departamento;
        quantidadeCell.textContent= quantidade;
        total += quantidade;
      }
    }
    totalElement.textContent = total;
  }

  function handleSearch() {
    const termoPesquisa = searchInput.value.toLowerCase();
    todosUltimosRegistros.forEach(registro => {
      if (registro.texto.includes(termoPesquisa)) {
        registro.div.style.display = ''; // Mostra o registro
      } else {
        registro.div.style.display = 'none'; // Oculta o registro
      }
    });
  }

  function resetPage() {
    fileInput.value = ''; // Limpa o arquivo selecionado
    fileNameSpan.textContent = 'Nenhum arquivo selecionado'; // Reseta o nome do arquivo
    resetAllReports(); // Limpa os relatórios de pessoas e departamentos
    resetButton.style.display = 'none'; // Oculta o botão de reset
    relatorioPessoasDiv.style.display = 'none'; // Oculta o relatório de pessoas
    relatorioDepartamentosDiv.style.display = 'none'; // Oculta o relatório de departamentos
    copyDepartmentReportButton.style.display = 'none'; // Oculta o botão de copiar do departamento
    searchInput.style.display = 'none'; // Oculta o campo de pesquisa
    searchInput.value = ''; // Limpa o campo de pesquisa
    todosUltimosRegistros = []; // Limpa o array de registros de pessoas
  }

  function resetAllReports() {
    // Reseta relatório de pessoas
    pessoasNoPredioSpan.textContent = '0';
    pessoasQueSairamSpan.textContent = '0';
    totalPessoasSpan.textContent = '0';
    ultimosRegistrosLista.innerHTML = '';
    todosUltimosRegistros = [];

    // Reseta relatório de departamentos
    tabelaRelatorioDepartamentos1Body.innerHTML = '';
    totalRelatorioDepartamentos1.textContent = '0';
    tabelaRelatorioDepartamentos2Body.innerHTML = '';
    totalRelatorioDepartamentos2.textContent = '0';
  }

  function copyDepartmentReportAsTable() {
    const tabela = document.getElementById('tabelaRelatorioDepartamentos2');
    let textoParaCopiar = "";

    // Adiciona as linhas do corpo
    const rows = tabela.querySelectorAll('tbody tr');
    rows.forEach(row => {
      const departamentoCell = row.querySelector('td:first-child');
      const quantidadeCell = row.querySelector('td:last-child');
      if (departamentoCell && quantidadeCell) {
        textoParaCopiar += `${departamentoCell.textContent.trim()} = ${quantidadeCell.textContent.trim()}\n`;
      }
    });

    // Adiciona a linha total
    const totalRow = tabela.querySelector('tfoot tr');
    if (totalRow) {
      const totalLabelCell = totalRow.querySelector('th:first-child');
      const totalValueCell = totalRow.querySelector('th:last-child');
      if (totalLabelCell && totalValueCell) {
        textoParaCopiar += `${totalLabelCell.textContent.trim()} = ${totalValueCell.textContent.trim()}`;
      }
    }

    // Tenta copiar para a área de transferência
    navigator.clipboard.writeText(textoParaCopiar)
      .then(() => {
        // Copiado com sucesso (sem alerta)
      })
      .catch(err => {
        console.error('Falha ao copiar o relatório de departamentos: ', err);
        // Falha ao copiar (sem alerta)
      });
  }
</script>

</body>
</html>